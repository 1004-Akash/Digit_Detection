import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import load_model
import ipywidgets as widgets
from IPython.display import display
import io
from PIL import Image

# Load the trained MNIST model
model = load_model("mnist_model.h5")
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])  # Fix warning

def preprocess_digits(image):
    """
    Preprocess an image containing multiple digits.
    Detects digits, extracts them, and prepares them for prediction.
    """
    # Convert to grayscale
    img = image.convert("L")
    img = np.array(img)

    # Invert colors if needed (MNIST format: white digit on black background)
    if np.mean(img) > 128:
        img = cv2.bitwise_not(img)

    # Apply Gaussian blur and thresholding
    img = cv2.GaussianBlur(img, (5, 5), 0)
    _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Find contours (multiple digits)
    contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    digit_images = []
    bounding_boxes = []

    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        if w * h > 50:  # Ignore very small noise
            bounding_boxes.append((x, y, w, h))

    # Sort bounding boxes from left to right
    bounding_boxes = sorted(bounding_boxes, key=lambda b: b[0])

    for (x, y, w, h) in bounding_boxes:
        digit = img[y:y+h, x:x+w]  # Crop digit

        # Resize keeping aspect ratio
        scale = 20.0 / max(w, h)
        new_w, new_h = int(w * scale), int(h * scale)
        digit = cv2.resize(digit, (new_w, new_h), interpolation=cv2.INTER_AREA)

        # Center in a 28x28 black canvas
        new_img = np.zeros((28, 28), dtype=np.uint8)
        x_offset, y_offset = (28 - new_w) // 2, (28 - new_h) // 2
        new_img[y_offset:y_offset+new_h, x_offset:x_offset+new_w] = digit

        # Normalize and reshape
        new_img = new_img / 255.0
        new_img = new_img.reshape(28, 28, 1)

        digit_images.append(new_img)

    return digit_images, img  # Return processed digits & original preprocessed image


# Function to predict multiple digits
def predict_digits(image):
    digits, processed_img = preprocess_digits(image)

    predictions = []
    plt.figure(figsize=(10, 2))

    for i, digit in enumerate(digits):
        digit_input = digit.reshape(1, 28, 28, 1)
        prediction = model.predict(digit_input)
        predicted_label = np.argmax(prediction)

        predictions.append(str(predicted_label))

        # Display each digit and prediction
        plt.subplot(1, len(digits), i + 1)
        plt.imshow(digit.reshape(28, 28), cmap="gray")
        plt.title(f"{predicted_label}")
        plt.axis("off")

    plt.show()
    print(f"Predicted Number: {''.join(predictions)}")  # Combine digits


# File upload widget
upload_button = widgets.FileUpload(accept="image/*", multiple=False)

# Function to process uploaded file
def on_upload(change):
    for name, file_info in upload_button.value.items():
        image = Image.open(io.BytesIO(file_info["content"]))  # Read image from memory
        predict_digits(image)  # Process image

upload_button.observe(on_upload, names="value")
display(upload_button)  # Show upload button
